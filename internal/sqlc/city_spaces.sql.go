// Code generated by sqlc. DO NOT EDIT.
// source: city_spaces.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const createCitySpace = `-- name: CreateCitySpace :one
INSERT INTO city_spaces (city_id, "order", space_type, required_privilege)
VALUES ($1, $2, $3, $4)
RETURNING id, city_id, "order", space_type, required_privilege, created_at, updated_at
`

type CreateCitySpaceParams struct {
	CityID            int64
	Order             int16
	SpaceType         int16
	RequiredPrivilege int16
}

func (q *Queries) CreateCitySpace(ctx context.Context, arg CreateCitySpaceParams) (CitySpace, error) {
	row := q.db.QueryRowContext(ctx, createCitySpace,
		arg.CityID,
		arg.Order,
		arg.SpaceType,
		arg.RequiredPrivilege,
	)
	var i CitySpace
	err := row.Scan(
		&i.ID,
		&i.CityID,
		&i.Order,
		&i.SpaceType,
		&i.RequiredPrivilege,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCitySpace = `-- name: DeleteCitySpace :exec
DELETE FROM city_spaces WHERE id = $1
`

func (q *Queries) DeleteCitySpace(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCitySpace, id)
	return err
}

const deleteCitySpacesWhereCityIDIn = `-- name: DeleteCitySpacesWhereCityIDIn :exec
DELETE FROM city_spaces WHERE city_id = ANY($1::bigint[])
`

func (q *Queries) DeleteCitySpacesWhereCityIDIn(ctx context.Context, cityids []int64) error {
	_, err := q.db.ExecContext(ctx, deleteCitySpacesWhereCityIDIn, pq.Array(cityids))
	return err
}

const getCitySpaceByID = `-- name: GetCitySpaceByID :one
SELECT id, city_id, "order", space_type, required_privilege, created_at, updated_at FROM city_spaces
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCitySpaceByID(ctx context.Context, id int64) (CitySpace, error) {
	row := q.db.QueryRowContext(ctx, getCitySpaceByID, id)
	var i CitySpace
	err := row.Scan(
		&i.ID,
		&i.CityID,
		&i.Order,
		&i.SpaceType,
		&i.RequiredPrivilege,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCitySpacesByCityID = `-- name: ListCitySpacesByCityID :many
SELECT id, city_id, "order", space_type, required_privilege, created_at, updated_at FROM city_spaces
WHERE city_id = $1
ORDER BY "order"
`

func (q *Queries) ListCitySpacesByCityID(ctx context.Context, cityID int64) ([]CitySpace, error) {
	rows, err := q.db.QueryContext(ctx, listCitySpacesByCityID, cityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CitySpace
	for rows.Next() {
		var i CitySpace
		if err := rows.Scan(
			&i.ID,
			&i.CityID,
			&i.Order,
			&i.SpaceType,
			&i.RequiredPrivilege,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCitySpacesByMultipleCities = `-- name: ListCitySpacesByMultipleCities :many
SELECT id, city_id, "order", space_type, required_privilege, created_at, updated_at FROM city_spaces
WHERE city_id = ANY($1::BIGINT[])
ORDER BY city_id, "order"
`

func (q *Queries) ListCitySpacesByMultipleCities(ctx context.Context, dollar_1 []int64) ([]CitySpace, error) {
	rows, err := q.db.QueryContext(ctx, listCitySpacesByMultipleCities, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CitySpace
	for rows.Next() {
		var i CitySpace
		if err := rows.Scan(
			&i.ID,
			&i.CityID,
			&i.Order,
			&i.SpaceType,
			&i.RequiredPrivilege,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCitySpace = `-- name: UpdateCitySpace :one
UPDATE city_spaces SET "order" = $1, space_type = $2, required_privilege = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, city_id, "order", space_type, required_privilege, created_at, updated_at
`

type UpdateCitySpaceParams struct {
	Order             int16
	SpaceType         int16
	RequiredPrivilege int16
}

func (q *Queries) UpdateCitySpace(ctx context.Context, arg UpdateCitySpaceParams) (CitySpace, error) {
	row := q.db.QueryRowContext(ctx, updateCitySpace, arg.Order, arg.SpaceType, arg.RequiredPrivilege)
	var i CitySpace
	err := row.Scan(
		&i.ID,
		&i.CityID,
		&i.Order,
		&i.SpaceType,
		&i.RequiredPrivilege,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
