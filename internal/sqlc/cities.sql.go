// Code generated by sqlc. DO NOT EDIT.
// source: cities.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const createCity = `-- name: CreateCity :one
INSERT INTO cities (board_id, name, x, y, upgrade_offered, immediate_point)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, board_id, name, x, y, upgrade_offered, immediate_point, created_at, updated_at
`

type CreateCityParams struct {
	BoardID        int64
	Name           string
	X              int32
	Y              int32
	UpgradeOffered int16
	ImmediatePoint int16
}

func (q *Queries) CreateCity(ctx context.Context, arg CreateCityParams) (City, error) {
	row := q.db.QueryRowContext(ctx, createCity,
		arg.BoardID,
		arg.Name,
		arg.X,
		arg.Y,
		arg.UpgradeOffered,
		arg.ImmediatePoint,
	)
	var i City
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.UpgradeOffered,
		&i.ImmediatePoint,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCity = `-- name: DeleteCity :exec
DELETE FROM cities
WHERE id = $1
`

func (q *Queries) DeleteCity(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCity, id)
	return err
}

const deleteMultipleCities = `-- name: DeleteMultipleCities :exec
DELETE FROM cities
WHERE id = ANY($1::BIGINT[])
`

func (q *Queries) DeleteMultipleCities(ctx context.Context, ids []int64) error {
	_, err := q.db.ExecContext(ctx, deleteMultipleCities, pq.Array(ids))
	return err
}

const getCity = `-- name: GetCity :one
SELECT id, board_id, name, x, y, upgrade_offered, immediate_point, created_at, updated_at FROM cities
WHERE id = $1
`

func (q *Queries) GetCity(ctx context.Context, id int64) (City, error) {
	row := q.db.QueryRowContext(ctx, getCity, id)
	var i City
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.UpgradeOffered,
		&i.ImmediatePoint,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCitiesByBoardID = `-- name: ListCitiesByBoardID :many
SELECT id, board_id, name, x, y, upgrade_offered, immediate_point, created_at, updated_at FROM cities
WHERE board_id = $1
ORDER BY id
`

func (q *Queries) ListCitiesByBoardID(ctx context.Context, boardID int64) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, listCitiesByBoardID, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.BoardID,
			&i.Name,
			&i.X,
			&i.Y,
			&i.UpgradeOffered,
			&i.ImmediatePoint,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCityIDsByBoardID = `-- name: ListCityIDsByBoardID :many
SELECT id FROM cities
WHERE board_id = $1
`

func (q *Queries) ListCityIDsByBoardID(ctx context.Context, boardID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listCityIDsByBoardID, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCity = `-- name: UpdateCity :one
UPDATE cities SET name = $2, x = $3, y = $4, upgrade_offered = $5, immediate_point = $6, updated_at = NOW()
WHERE id = $1
RETURNING id, board_id, name, x, y, upgrade_offered, immediate_point, created_at, updated_at
`

type UpdateCityParams struct {
	ID             int64
	Name           string
	X              int32
	Y              int32
	UpgradeOffered int16
	ImmediatePoint int16
}

func (q *Queries) UpdateCity(ctx context.Context, arg UpdateCityParams) (City, error) {
	row := q.db.QueryRowContext(ctx, updateCity,
		arg.ID,
		arg.Name,
		arg.X,
		arg.Y,
		arg.UpgradeOffered,
		arg.ImmediatePoint,
	)
	var i City
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.UpgradeOffered,
		&i.ImmediatePoint,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
