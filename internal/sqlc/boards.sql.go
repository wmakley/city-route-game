// Code generated by sqlc. DO NOT EDIT.
// source: boards.sql

package sqlc

import (
	"context"
)

const countBoards = `-- name: CountBoards :one
SELECT count(*) as count FROM boards
`

func (q *Queries) CountBoards(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBoards)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBoard = `-- name: CreateBoard :one
INSERT INTO boards (name, width, height)
VALUES ($1, $2, $3)
RETURNING id, name, game_id, width, height, created_at, updated_at
`

type CreateBoardParams struct {
	Name   string
	Width  int32
	Height int32
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, createBoard, arg.Name, arg.Width, arg.Height)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.Width,
		&i.Height,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBoard = `-- name: DeleteBoard :exec
DELETE FROM boards
WHERE id = $1
`

func (q *Queries) DeleteBoard(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBoard, id)
	return err
}

const getBoard = `-- name: GetBoard :one
SELECT id, name, game_id, width, height, created_at, updated_at FROM boards
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBoard(ctx context.Context, id int64) (Board, error) {
	row := q.db.QueryRowContext(ctx, getBoard, id)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.Width,
		&i.Height,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBoards = `-- name: ListBoards :many
SELECT id, name, game_id, width, height, created_at, updated_at FROM boards
ORDER BY id
`

func (q *Queries) ListBoards(ctx context.Context) ([]Board, error) {
	rows, err := q.db.QueryContext(ctx, listBoards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GameID,
			&i.Width,
			&i.Height,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBoard = `-- name: UpdateBoard :one
UPDATE boards SET name = $2, width = $3, height = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, name, game_id, width, height, created_at, updated_at
`

type UpdateBoardParams struct {
	ID     int64
	Name   string
	Width  int32
	Height int32
}

func (q *Queries) UpdateBoard(ctx context.Context, arg UpdateBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, updateBoard,
		arg.ID,
		arg.Name,
		arg.Width,
		arg.Height,
	)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.Width,
		&i.Height,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
